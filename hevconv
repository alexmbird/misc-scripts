#!/usr/bin/env bash

set -euf -o pipefail

#
# Convert to hevc
#

FFMPEG="ffmpeg"
EXTENSION="x265.mp4"


function show_help() {
  cat << EOF

Usage: ${0##*/} [-h] [-b bitrate] <INFILE> [INFILE...]

Convert videos to hevc using ffmpeg.  The resulting video has .mp4 container &
is renamed to end with ${EXTENSION}.

    -h          display this help and exit
    -b BITRATE  write bitrate <BITRATE>.  Default 500k.  Must end in 'k'.

<INFILE>  can be any video format supported by your local ffmpeg build

EOF
}


# Set variables...
bitrate="500k"




OPTIND=1 # Reset is necessary if getopts was used previously in the script.  It is a good idea to make this local in a function.
while getopts "hb:" opt; do
    case "$opt" in
        h)
            show_help
            exit 0
            ;;
        b)  bitrate=$OPTARG
            ;;
        '?')
            show_help >&2
            exit 1
            ;;
    esac
done
shift "$((OPTIND-1))" # Shift off the options and optional --.

if [ $# -lt 1 ]; then
  show_help >&2
  exit 1
fi


# Check ffmpeg actually present
type $FFMPEG >/dev/null 2>&1 || { echo >&2 "I require ${FFMPEG} but it's not installed.  Aborting."; exit 1; }


# Quiet: -hide_banner -loglevel error 
# Subtitles: -scodec copy
FFMPEG_OPTS="-hide_banner -loglevel fatal -stats -c:a copy -bsf:a aac_adtstoasc -c:v hevc -preset medium -x265-params log-level=error,no-slow-firstpass"



# Loop through all args
for source in "$@"; do
	dest="${source%.*}.${EXTENSION}"
	echo "Converting $source -> $dest @ ${bitrate}"
	$FFMPEG -y -i "${source}" ${FFMPEG_OPTS} -b:v ${bitrate} -pass 1 -f mp4 /dev/null && \
	$FFMPEG -i    "${source}" ${FFMPEG_OPTS} -b:v ${bitrate} -pass 2 "${dest}"
	rm -f ffmpeg2pass-0.log
	ls -lh "${source}" "${dest}"
done



echo

