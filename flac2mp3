#!/usr/bin/env python3

import os, sys
import argparse
import subprocess
import shutil
from multiprocessing.pool import ThreadPool
import re


"""Transcode FLAC audio to mp3, with user-configurable quality and intelligent
directory handling.  Metadata will be preserved at both the audio and filesystem
levels."""

# Binary names we might expect to find ffmpeg/avconv with
AVCONV_NAMES = ('avconv', 'ffmpeg')


# These are meaningless after transcoding; don't copy them
NO_COPY_EXTS = ('.log', '.cue', 'm3u')


# Default LAME quality setting - 0 is best, 9 is worst.  0-3 are considered 
# transparent.
DEFAULT_QUAL = 2   # Use 0-1 for particularly complex music





class Transcoder(object):
    
    # Output files get this extension
    EXTENSION='___'
    DEFAULT_QUALITY='_'
    
    @classmethod
    def transcode(cls, f_source, f_dest, quality=None, avconv='/usr/local/bin/ffmpeg'):
        """Transcode a source FLAC
        
        Args:
            f_source:
            f_dest:
            quality:  optional; codec-specific quality setting
            avconv:   optional; where to find a ffmpeg/avconv binary
        
        Raises:
        
        Returns:
            Tuple of (source path, bool success, dest path)
        """
        # print("In transcode()")
        # print("  SRC '{}'".format(f_source))
        # print("  DST '{}'".format(f_dest))

        # In this base method we simply sanity-check the arguments
        if not isinstance(f_source, str):
            raise TypeError("f_source must be a str")
        if not isinstance(f_dest, str):
            raise TypeError("f_dest must be a str")
        if not f_source.lower().endswith('.flac'):
            raise ValueError("Can only transcode from flac files, not '{}'".format(f_source))
        if not f_dest.lower().endswith('.'+cls.EXTENSION):
            raise ValueError("Can only transcode to {} files".format(cls.EXTENSION))

    
    @classmethod
    def renameFile(cls, path):
        return re.sub(r'\.flac$', '.'+cls.EXTENSION, path, re.IGNORECASE)
    
    
    # Use this for finding/replacing flac in dir names
    RE_FLAC = re.compile(r'\Wflac\W', re.IGNORECASE)
    
    @classmethod
    def renameDir(cls, path, quality=''):
        """Generate a destination directory name for the converted album, with
        'mp3' somewhere in it.
        
        Args:
            path:    string directory name
            quality: optional, str encoder quality
        
        Returns:
            string to use for a new directory name
        """
        print("quality={}".format(quality))
        fmt_str = '{}_{}'.format(cls.EXTENSION, quality) if quality else cls.EXTENSION
        source_dir_dir  = os.path.dirname(path)
        source_dir_name = os.path.basename(path)
        if cls.RE_FLAC.search(source_dir_name):
            new_dir_name = cls.RE_FLAC.sub('[{}]'.format(fmt_str), source_dir_name)
        else:
            new_dir_name = "{} [{}]".format(source_dir_name, fmt_str)
        return os.path.join(source_dir_dir, new_dir_name)


class TranscoderLame(Transcoder):
    
    EXTENSION='mp3'
    DEFAULT_QUALITY=2
    
    @classmethod
    def transcode(cls, f_source, f_dest, quality=None, avconv='/usr/local/bin/ffmpeg'):
        """Use avconv/ffmpeg to transcode a flac file into an mp3 with the supplied
        quality settings.
        
        Args:
            f_source:  source file, which must be flac
            f_dest:    dest file, which must be mp3
            avconv:    path to avconv/ffmpeg binary
            quality:   optional; VBR setting passed to LAME encoder.  0 is best.
        
        Raises:
            TypeError:  f_source or f_dest wasn't a string
            ValueError: supplied sources were of the wrong file type
            IOError:    dest path is not a directory / couldn't be created
            
        Returns:
            Tuple of (f_source, success, output)
        """
        super(TranscoderLame,cls).transcode(f_source, f_dest)
        if quality is None:
            quality = cls.DEFAULT_QUALITY
        comment = "encoder=ffmpeg+libmp3lame; vbr={}".format(
            quality
        )
        # See http://ffmpeg.org/ffmpeg-codecs.html#libmp3lame-1
        p_args = [
            avconv,
            '-y',
            '-i', f_source,
            '-loglevel', 'error',
            '-c:v', 'copy',
            '-codec:a', 'libmp3lame',
            '-q:a', str(quality),
            '-map_metadata', '0',
            '-id3v2_version', '3',
            '-write_id3v1', '1',
            '-metadata', 'comment={}'.format(comment),
            f_dest
        ]
        # print("'{}' => '{}'".format(f_source, f_dest))
        # Rewrite this to use subprocess.run() once Python 3.5 is more common
        try:
            output = subprocess.check_output(
                p_args,
                stdin=subprocess.DEVNULL,
                stderr=subprocess.STDOUT
            )
        except subprocess.CalledProcessError as e:
            return (f_source, False, e.output)
        finally:
            if os.path.isfile(f_dest):
                shutil.copystat(f_source, f_dest)
        return (f_source, True, output)


class TranscoderOpus(Transcoder):
    
    EXTENSION='opus'
    DEFAULT_QUALITY='128k'
    
    @classmethod
    def transcode(cls, f_source, f_dest, quality=None, avconv='/usr/local/bin/ffmpeg'):
        """Use avconv/ffmpeg to transcode a flac file into an mp3 with the supplied
        quality settings.
        
        Args:
            f_source:  source file, which must be flac
            f_dest:    dest file, which must be mp3
            avconv:    path to avconv/ffmpeg binary
            quality:   VBR setting passed to LAME encoder.  0 is best.
        
        Raises:
            TypeError:  f_source or f_dest wasn't a string
            ValueError: supplied sources were of the wrong file type
            IOError:    dest path is not a directory / couldn't be created
            
        Returns:
            Tuple of (f_source, success, output)
        """
        super(TranscoderOpus,cls).transcode(f_source, f_dest)
        if quality is None:
            quality = cls.DEFAULT_QUALITY
        comment = "encoder=ffmpeg+libopus; vbr={}".format(
            quality
        )
        # See http://ffmpeg.org/ffmpeg-codecs.html#libopus-1
        # See https://wiki.xiph.org/OpusFAQ
        p_args = [
            avconv,
            '-y',
            '-i', f_source,
            '-loglevel', 'error',
            '-c:v', 'copy',
            '-codec:a', 'libopus',
            '-vbr', 'on',
            '-compression_level', '10', # Slowest encode, highest quality
            # '-frame_duration', '20',
            # '-q:a', str(quality),
            '-b:a', str(quality),
            '-map_metadata', '0',
            '-id3v2_version', '3',
            '-write_id3v1', '1',
            '-metadata', 'comment={}'.format(comment),
            f_dest
        ]
        # print("'{}' => '{}'".format(f_source, f_dest))
        # Rewrite this to use subprocess.run() once Python 3.5 is more common
        try:
            output = subprocess.check_output(
                p_args,
                stdin=subprocess.DEVNULL,
                stderr=subprocess.STDOUT
            )
        except subprocess.CalledProcessError as e:
            return (f_source, False, e.output)
        finally:
            if os.path.isfile(f_dest):
                shutil.copystat(f_source, f_dest)
        return (f_source, True, output)





TRANSCODER_MAP = {
    'mp3': TranscoderLame,
    'opus': TranscoderOpus
}




def autodetect_avconv(force=None):
    """Search $PATH to find an avconv/ffmpeg binary
    
    Args:
        None
    
    Raises:
        IOError - Couldn't find any executable avconv/ffmpeg
    
    Returns:
        string location of binary
    """
    def _match(f):
        return os.path.isfile(f) and os.access(f, os.X_OK)
    def _find(paths, matchFunc=os.path.isfile):
        for dirname in os.getenv('PATH', '').split(':'):
            for p in paths:
                candidate = os.path.join(dirname, p)
                # print("Testing {}".format(candidate))
                if matchFunc(candidate):
                    return candidate
        raise IOError("Can't find executables for {}".format('/'.join(paths)))
    if force is not None:
        if not _match(force):
            raise IOError("Forced avconv binary {} is missing/noexec".format(force))
        return force
    else:
        return _find(AVCONV_NAMES, _match)








    
def jobs(source, transcoder, clobber=False, quality=''):
    """Yield a stream of jobs to do for a given file/album.  Create dest
    dir if necessary.
    
    Args:
        source:     string name for file or directory
        transcoder: a Transcoder object implementing a transcode() classmethod
        quality:    str quality for encoder; added to audio format str
        
    Raises:
        IOError: source is not a directory or flac file
    
    Yields:
        Tuples of (type, f_source, f_dest) where 'type' is one of 't' for
        transcode or 'c' for copy, f_source is the path to be copied and f_dest
        is where it ends up.
    """
    if not quality:
        quality = transcoder.DEFAULT_QUALITY
    if os.path.isfile(source) and source.lower().endswith('.flac'):
        yield (     transcoder.transcode,
                    source,
                    transcoder.renameFile(source)
        )
    elif os.path.isdir(source):
        source = source.rstrip('/') # otherwise we get a weird [mp3] dir within
        # d_dest = destdir_name(source, transcoder.EXTENSION)
        d_dest = transcoder.renameDir(source, quality)
        if os.path.exists(d_dest):
            if clobber:
                print("Dest dir '{}' already exists; deleting".format(d_dest))
                shutil.rmtree(d_dest)
            else:
                raise IOError("Dest dir '{}' already exists; won't clobber".format(d_dest))
        os.makedirs(d_dest, exist_ok=True)
        shutil.copystat(source, d_dest)
        for path in os.listdir(source):
            f_source = os.path.join(source, path)
            if path.startswith('.'):
                continue
            elif path.lower().endswith(NO_COPY_EXTS):
                continue
            elif os.path.isfile(f_source) and path.lower().endswith('.flac'):
                yield (     transcoder.transcode,
                            f_source,
                            os.path.join(
                                d_dest,
                                transcoder.renameFile(path)
                            )
                )
            else:
                yield (     'c', 
                            f_source,
                            os.path.join(d_dest, path)
                )
    else:
        raise IOError("Target '{}' was neither a flac file nor directory")


    
    
parser = argparse.ArgumentParser(
    description="""Transcode flac files into mp3s while preserving tags, filesystem metadata and non-audio files.  Sources can be either individual flac files or directories containing then, which are recreated with a new name and mp3-ed contents.""",
    epilog="""Quality Notes
    
For 'lame' default is VBR 2 - transparent for most music.  For electronic music you can get away with lower settings (e.g. 3-4) which discard more high-frequency data.  See http://wiki.hydrogenaud.io/index.php?title=LAME#Maximum_quality_and_archiving for more information.

For 'opus' default is 128k, reckoned 'very close to transparency'.  160k or 192k should be perfect; values upto 510k accepted.
"""
)

parser.add_argument('sources', metavar='SOURCE', type=str, nargs='+',
                    help='flac files or album dirs to transcode')
parser.add_argument('--delete', '-d', action='store_const', 
                    const=True, default=False,
                    help="delete any existing destination dirs")
parser.add_argument('--avconv', '-a', type=str,
                    help='force avconv/ffmpeg binary')
parser.add_argument('--quality', '-q', type=str, action='store',
                    default=None,
                    help='quality setting - codec-dependent')
parser.add_argument('--format', '-f', type=str, action='store',
                    choices=['mp3', 'opus'],
                    default='mp3',
                    help='output format; default is mp3')


if __name__ == '__main__':
    args = parser.parse_args()
    avconv = autodetect_avconv(args.avconv)
    transcoder = TRANSCODER_MAP[args.format]
    print("Using avconv {}".format(avconv))
    def _cb(r):
        f_source, success, output = r
        print('='*78)
        if success:
            print("COMPLETED: {}".format(f_source))
        else:
            print("FAILED: {}".format(f_source))
        if len(output) > 0:
            print("OUTPUT:\n{}".format(str(output)))
        print('='*78)
        print()
    def _ecb(e):
        raise e
    with ThreadPool() as pool:
        for s in args.sources:
            for job in jobs(s, transcoder=transcoder, clobber=args.delete, quality=args.quality):
                if 'DEBUG' in os.environ:
                    print(str(job))
                    continue
                job_type, f_source, f_dest = job
                if job_type == 'c':
                    # print("SYNC  {}".format(str(job)))
                    print("'{}' -> '{}'".format(f_source, f_dest))
                    if os.path.isdir(f_source):
                        shutil.copytree(f_source, f_dest)
                    else:
                        shutil.copy2(f_source, f_dest)
                elif callable(job_type):
                    # print("ASYNC {}".format(str(job)))
                    pool.apply_async(
                        job_type,
                        (f_source, f_dest),
                        dict(avconv=avconv, quality=args.quality),
                        _cb, _ecb
                    )
                else:
                    raise RuntimeError("Unknown job type '{}'".format(job_type))
        print()
        pool.close()
        pool.join()



